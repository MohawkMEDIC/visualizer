#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MARC.EHRS.Visualization.Server.Persistence.Ado
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VisualizerDb")]
	public partial class AuditModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAudit(Audit instance);
    partial void UpdateAudit(Audit instance);
    partial void DeleteAudit(Audit instance);
    partial void InsertStatusCode(StatusCode instance);
    partial void UpdateStatusCode(StatusCode instance);
    partial void DeleteStatusCode(StatusCode instance);
    partial void InsertAuditAuditSourceAssoc(AuditAuditSourceAssoc instance);
    partial void UpdateAuditAuditSourceAssoc(AuditAuditSourceAssoc instance);
    partial void DeleteAuditAuditSourceAssoc(AuditAuditSourceAssoc instance);
    partial void InsertAuditCode(AuditCode instance);
    partial void UpdateAuditCode(AuditCode instance);
    partial void DeleteAuditCode(AuditCode instance);
    partial void InsertAuditEventTypeAuditCodeAssoc(AuditEventTypeAuditCodeAssoc instance);
    partial void UpdateAuditEventTypeAuditCodeAssoc(AuditEventTypeAuditCodeAssoc instance);
    partial void DeleteAuditEventTypeAuditCodeAssoc(AuditEventTypeAuditCodeAssoc instance);
    partial void InsertAuditObject(AuditObject instance);
    partial void UpdateAuditObject(AuditObject instance);
    partial void DeleteAuditObject(AuditObject instance);
    partial void InsertAuditObjectDetail(AuditObjectDetail instance);
    partial void UpdateAuditObjectDetail(AuditObjectDetail instance);
    partial void DeleteAuditObjectDetail(AuditObjectDetail instance);
    partial void InsertAuditParticipant(AuditParticipant instance);
    partial void UpdateAuditParticipant(AuditParticipant instance);
    partial void DeleteAuditParticipant(AuditParticipant instance);
    partial void InsertAuditParticipantRoleCodeAssoc(AuditParticipantRoleCodeAssoc instance);
    partial void UpdateAuditParticipantRoleCodeAssoc(AuditParticipantRoleCodeAssoc instance);
    partial void DeleteAuditParticipantRoleCodeAssoc(AuditParticipantRoleCodeAssoc instance);
    partial void InsertAuditSession(AuditSession instance);
    partial void UpdateAuditSession(AuditSession instance);
    partial void DeleteAuditSession(AuditSession instance);
    partial void InsertAuditSource(AuditSource instance);
    partial void UpdateAuditSource(AuditSource instance);
    partial void DeleteAuditSource(AuditSource instance);
    partial void InsertAuditSourceTypeAssoc(AuditSourceTypeAssoc instance);
    partial void UpdateAuditSourceTypeAssoc(AuditSourceTypeAssoc instance);
    partial void DeleteAuditSourceTypeAssoc(AuditSourceTypeAssoc instance);
    partial void InsertAuditStatus(AuditStatus instance);
    partial void UpdateAuditStatus(AuditStatus instance);
    partial void DeleteAuditStatus(AuditStatus instance);
    partial void InsertNode(Node instance);
    partial void UpdateNode(Node instance);
    partial void DeleteNode(Node instance);
    partial void InsertNodeVersion(NodeVersion instance);
    partial void UpdateNodeVersion(NodeVersion instance);
    partial void DeleteNodeVersion(NodeVersion instance);
    partial void InsertAuditError(AuditError instance);
    partial void UpdateAuditError(AuditError instance);
    partial void DeleteAuditError(AuditError instance);
    #endregion
		
		public AuditModelDataContext() : 
				base(global::MARC.EHRS.Visualization.Server.Persistence.Ado.Properties.Settings.Default.VisualizerDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AuditModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuditModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuditModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuditModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Audit> Audits
		{
			get
			{
				return this.GetTable<Audit>();
			}
		}
		
		public System.Data.Linq.Table<StatusCode> StatusCodes
		{
			get
			{
				return this.GetTable<StatusCode>();
			}
		}
		
		public System.Data.Linq.Table<AuditAuditSourceAssoc> AuditAuditSourceAssocs
		{
			get
			{
				return this.GetTable<AuditAuditSourceAssoc>();
			}
		}
		
		public System.Data.Linq.Table<AuditCode> AuditCodes
		{
			get
			{
				return this.GetTable<AuditCode>();
			}
		}
		
		public System.Data.Linq.Table<AuditEventTypeAuditCodeAssoc> AuditEventTypeAuditCodeAssocs
		{
			get
			{
				return this.GetTable<AuditEventTypeAuditCodeAssoc>();
			}
		}
		
		public System.Data.Linq.Table<AuditObject> AuditObjects
		{
			get
			{
				return this.GetTable<AuditObject>();
			}
		}
		
		public System.Data.Linq.Table<AuditObjectDetail> AuditObjectDetails
		{
			get
			{
				return this.GetTable<AuditObjectDetail>();
			}
		}
		
		public System.Data.Linq.Table<AuditParticipant> AuditParticipants
		{
			get
			{
				return this.GetTable<AuditParticipant>();
			}
		}
		
		public System.Data.Linq.Table<AuditParticipantRoleCodeAssoc> AuditParticipantRoleCodeAssocs
		{
			get
			{
				return this.GetTable<AuditParticipantRoleCodeAssoc>();
			}
		}
		
		public System.Data.Linq.Table<AuditSession> AuditSessions
		{
			get
			{
				return this.GetTable<AuditSession>();
			}
		}
		
		public System.Data.Linq.Table<AuditSource> AuditSources
		{
			get
			{
				return this.GetTable<AuditSource>();
			}
		}
		
		public System.Data.Linq.Table<AuditSourceTypeAssoc> AuditSourceTypeAssocs
		{
			get
			{
				return this.GetTable<AuditSourceTypeAssoc>();
			}
		}
		
		public System.Data.Linq.Table<AuditStatus> AuditStatus
		{
			get
			{
				return this.GetTable<AuditStatus>();
			}
		}
		
		public System.Data.Linq.Table<Node> Nodes
		{
			get
			{
				return this.GetTable<Node>();
			}
		}
		
		public System.Data.Linq.Table<NodeVersion> NodeVersions
		{
			get
			{
				return this.GetTable<NodeVersion>();
			}
		}
		
		public System.Data.Linq.Table<AuditError> AuditErrors
		{
			get
			{
				return this.GetTable<AuditError>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_CreateAuditCodeIfNotExists")]
		public int sp_CreateAuditCodeIfNotExists([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DomainIn", DbType="VarChar(48)")] string domainIn, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MnemonicIn", DbType="VarChar(48)")] string mnemonicIn, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DisplayNameIn", DbType="VarChar(48)")] string displayNameIn, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CodeIdOut", DbType="Int")] ref System.Nullable<int> codeIdOut)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), domainIn, mnemonicIn, displayNameIn, codeIdOut);
			codeIdOut = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_SetAuditStatus")]
		public ISingleResult<sp_SetAuditStatusResult> sp_SetAuditStatus([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AuditIdIn", DbType="Int")] System.Nullable<int> auditIdIn, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StatusIn", DbType="VarChar(28)")] string statusIn, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAlert", DbType="Bit")] System.Nullable<bool> isAlert, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VersionId", DbType="Int")] ref System.Nullable<int> versionId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), auditIdIn, statusIn, isAlert, versionId);
			versionId = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((ISingleResult<sp_SetAuditStatusResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_GetAuditCodeId", IsComposable=true)]
		public System.Nullable<int> fn_GetAuditCodeId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DomainIn", DbType="VarChar(1)")] string domainIn, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MnemonicIn", DbType="VarChar(1)")] string mnemonicIn)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), domainIn, mnemonicIn).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Audit")]
	public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditId;
		
		private int _ActionCodeId;
		
		private int _OutcomeCodeId;
		
		private int _EventCodeId;
		
		private System.DateTime _EventTimestamp;
		
		private System.DateTime _CreationTimestamp;
		
		private System.Guid _SessionId;
		
		private string _ProcessName;
		
		private System.Guid _GlobalId;
		
		private EntitySet<AuditAuditSourceAssoc> _AuditAuditSourceAssocs;
		
		private EntitySet<AuditEventTypeAuditCodeAssoc> _AuditEventTypeAuditCodeAssocs;
		
		private EntitySet<AuditObject> _AuditObjects;
		
		private EntitySet<AuditParticipant> _AuditParticipants;
		
		private EntitySet<AuditStatus> _AuditStatus;
		
		private EntityRef<AuditCode> _AuditCode;
		
		private EntityRef<AuditCode> _AuditCode1;
		
		private EntityRef<AuditCode> _AuditCode2;
		
		private EntityRef<AuditSession> _AuditSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIdChanging(int value);
    partial void OnAuditIdChanged();
    partial void OnActionCodeIdChanging(int value);
    partial void OnActionCodeIdChanged();
    partial void OnOutcomeCodeIdChanging(int value);
    partial void OnOutcomeCodeIdChanged();
    partial void OnEventCodeIdChanging(int value);
    partial void OnEventCodeIdChanged();
    partial void OnEventTimestampChanging(System.DateTime value);
    partial void OnEventTimestampChanged();
    partial void OnCreationTimestampChanging(System.DateTime value);
    partial void OnCreationTimestampChanged();
    partial void OnSessionIdChanging(System.Guid value);
    partial void OnSessionIdChanged();
    partial void OnProcessNameChanging(string value);
    partial void OnProcessNameChanged();
    partial void OnGlobalIdChanging(System.Guid value);
    partial void OnGlobalIdChanged();
    #endregion
		
		public Audit()
		{
			this._AuditAuditSourceAssocs = new EntitySet<AuditAuditSourceAssoc>(new Action<AuditAuditSourceAssoc>(this.attach_AuditAuditSourceAssocs), new Action<AuditAuditSourceAssoc>(this.detach_AuditAuditSourceAssocs));
			this._AuditEventTypeAuditCodeAssocs = new EntitySet<AuditEventTypeAuditCodeAssoc>(new Action<AuditEventTypeAuditCodeAssoc>(this.attach_AuditEventTypeAuditCodeAssocs), new Action<AuditEventTypeAuditCodeAssoc>(this.detach_AuditEventTypeAuditCodeAssocs));
			this._AuditObjects = new EntitySet<AuditObject>(new Action<AuditObject>(this.attach_AuditObjects), new Action<AuditObject>(this.detach_AuditObjects));
			this._AuditParticipants = new EntitySet<AuditParticipant>(new Action<AuditParticipant>(this.attach_AuditParticipants), new Action<AuditParticipant>(this.detach_AuditParticipants));
			this._AuditStatus = new EntitySet<AuditStatus>(new Action<AuditStatus>(this.attach_AuditStatus), new Action<AuditStatus>(this.detach_AuditStatus));
			this._AuditCode = default(EntityRef<AuditCode>);
			this._AuditCode1 = default(EntityRef<AuditCode>);
			this._AuditCode2 = default(EntityRef<AuditCode>);
			this._AuditSession = default(EntityRef<AuditSession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionCodeId", DbType="Int NOT NULL")]
		public int ActionCodeId
		{
			get
			{
				return this._ActionCodeId;
			}
			set
			{
				if ((this._ActionCodeId != value))
				{
					if (this._AuditCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionCodeIdChanging(value);
					this.SendPropertyChanging();
					this._ActionCodeId = value;
					this.SendPropertyChanged("ActionCodeId");
					this.OnActionCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutcomeCodeId", DbType="Int NOT NULL")]
		public int OutcomeCodeId
		{
			get
			{
				return this._OutcomeCodeId;
			}
			set
			{
				if ((this._OutcomeCodeId != value))
				{
					if (this._AuditCode2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutcomeCodeIdChanging(value);
					this.SendPropertyChanging();
					this._OutcomeCodeId = value;
					this.SendPropertyChanged("OutcomeCodeId");
					this.OnOutcomeCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCodeId", DbType="Int NOT NULL")]
		public int EventCodeId
		{
			get
			{
				return this._EventCodeId;
			}
			set
			{
				if ((this._EventCodeId != value))
				{
					if (this._AuditCode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventCodeIdChanging(value);
					this.SendPropertyChanging();
					this._EventCodeId = value;
					this.SendPropertyChanged("EventCodeId");
					this.OnEventCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTimestamp", DbType="DateTime NOT NULL")]
		public System.DateTime EventTimestamp
		{
			get
			{
				return this._EventTimestamp;
			}
			set
			{
				if ((this._EventTimestamp != value))
				{
					this.OnEventTimestampChanging(value);
					this.SendPropertyChanging();
					this._EventTimestamp = value;
					this.SendPropertyChanged("EventTimestamp");
					this.OnEventTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTimestamp", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTimestamp
		{
			get
			{
				return this._CreationTimestamp;
			}
			set
			{
				if ((this._CreationTimestamp != value))
				{
					this.OnCreationTimestampChanging(value);
					this.SendPropertyChanging();
					this._CreationTimestamp = value;
					this.SendPropertyChanged("CreationTimestamp");
					this.OnCreationTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AuditSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessName", DbType="VarChar(MAX)", CanBeNull=false)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this.OnProcessNameChanging(value);
					this.SendPropertyChanging();
					this._ProcessName = value;
					this.SendPropertyChanged("ProcessName");
					this.OnProcessNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GlobalId
		{
			get
			{
				return this._GlobalId;
			}
			set
			{
				if ((this._GlobalId != value))
				{
					this.OnGlobalIdChanging(value);
					this.SendPropertyChanging();
					this._GlobalId = value;
					this.SendPropertyChanged("GlobalId");
					this.OnGlobalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditAuditSourceAssoc", Storage="_AuditAuditSourceAssocs", ThisKey="AuditId", OtherKey="AuditId")]
		public EntitySet<AuditAuditSourceAssoc> AuditAuditSourceAssocs
		{
			get
			{
				return this._AuditAuditSourceAssocs;
			}
			set
			{
				this._AuditAuditSourceAssocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditEventTypeAuditCodeAssoc", Storage="_AuditEventTypeAuditCodeAssocs", ThisKey="AuditId", OtherKey="AuditId")]
		public EntitySet<AuditEventTypeAuditCodeAssoc> AuditEventTypeAuditCodeAssocs
		{
			get
			{
				return this._AuditEventTypeAuditCodeAssocs;
			}
			set
			{
				this._AuditEventTypeAuditCodeAssocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditObject", Storage="_AuditObjects", ThisKey="AuditId", OtherKey="AuditId")]
		public EntitySet<AuditObject> AuditObjects
		{
			get
			{
				return this._AuditObjects;
			}
			set
			{
				this._AuditObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditParticipant", Storage="_AuditParticipants", ThisKey="AuditId", OtherKey="AuditId")]
		public EntitySet<AuditParticipant> AuditParticipants
		{
			get
			{
				return this._AuditParticipants;
			}
			set
			{
				this._AuditParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditStatus", Storage="_AuditStatus", ThisKey="AuditId", OtherKey="AuditId")]
		public EntitySet<AuditStatus> AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				this._AuditStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_Audit", Storage="_AuditCode", ThisKey="ActionCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode ActionCode
		{
			get
			{
				return this._AuditCode.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._AuditCode.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._ActionCodeId = value.CodeId;
					}
					else
					{
						this._ActionCodeId = default(int);
					}
					this.SendPropertyChanged("ActionCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_Audit1", Storage="_AuditCode1", ThisKey="EventCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode EventCode
		{
			get
			{
				return this._AuditCode1.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode1.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode1.Entity = null;
						previousValue.Audits1.Remove(this);
					}
					this._AuditCode1.Entity = value;
					if ((value != null))
					{
						value.Audits1.Add(this);
						this._EventCodeId = value.CodeId;
					}
					else
					{
						this._EventCodeId = default(int);
					}
					this.SendPropertyChanged("EventCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_Audit2", Storage="_AuditCode2", ThisKey="OutcomeCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode OutcomeCode
		{
			get
			{
				return this._AuditCode2.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode2.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode2.Entity = null;
						previousValue.Audits2.Remove(this);
					}
					this._AuditCode2.Entity = value;
					if ((value != null))
					{
						value.Audits2.Add(this);
						this._OutcomeCodeId = value.CodeId;
					}
					else
					{
						this._OutcomeCodeId = default(int);
					}
					this.SendPropertyChanged("OutcomeCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSession_Audit", Storage="_AuditSession", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public AuditSession AuditSession
		{
			get
			{
				return this._AuditSession.Entity;
			}
			set
			{
				AuditSession previousValue = this._AuditSession.Entity;
				if (((previousValue != value) 
							|| (this._AuditSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditSession.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._AuditSession.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(System.Guid);
					}
					this.SendPropertyChanged("AuditSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditAuditSourceAssocs(AuditAuditSourceAssoc entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_AuditAuditSourceAssocs(AuditAuditSourceAssoc entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_AuditEventTypeAuditCodeAssocs(AuditEventTypeAuditCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_AuditEventTypeAuditCodeAssocs(AuditEventTypeAuditCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_AuditObjects(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_AuditObjects(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_AuditParticipants(AuditParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_AuditParticipants(AuditParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_AuditStatus(AuditStatus entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_AuditStatus(AuditStatus entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusCode")]
	public partial class StatusCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeId;
		
		private string _Name;
		
		private EntitySet<AuditStatus> _AuditStatus;
		
		private EntitySet<NodeVersion> _NodeVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeIdChanging(int value);
    partial void OnCodeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public StatusCode()
		{
			this._AuditStatus = new EntitySet<AuditStatus>(new Action<AuditStatus>(this.attach_AuditStatus), new Action<AuditStatus>(this.detach_AuditStatus));
			this._NodeVersions = new EntitySet<NodeVersion>(new Action<NodeVersion>(this.attach_NodeVersions), new Action<NodeVersion>(this.detach_NodeVersions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodeId
		{
			get
			{
				return this._CodeId;
			}
			set
			{
				if ((this._CodeId != value))
				{
					this.OnCodeIdChanging(value);
					this.SendPropertyChanging();
					this._CodeId = value;
					this.SendPropertyChanged("CodeId");
					this.OnCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusCode_AuditStatus", Storage="_AuditStatus", ThisKey="CodeId", OtherKey="StatusCodeId")]
		public EntitySet<AuditStatus> AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				this._AuditStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusCode_NodeVersion", Storage="_NodeVersions", ThisKey="CodeId", OtherKey="StatusCodeId")]
		public EntitySet<NodeVersion> NodeVersions
		{
			get
			{
				return this._NodeVersions;
			}
			set
			{
				this._NodeVersions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditStatus(AuditStatus entity)
		{
			this.SendPropertyChanging();
			entity.StatusCode = this;
		}
		
		private void detach_AuditStatus(AuditStatus entity)
		{
			this.SendPropertyChanging();
			entity.StatusCode = null;
		}
		
		private void attach_NodeVersions(NodeVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusCode = this;
		}
		
		private void detach_NodeVersions(NodeVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditAuditSourceAssoc")]
	public partial class AuditAuditSourceAssoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditSourceId;
		
		private int _AuditId;
		
		private EntityRef<Audit> _Audit;
		
		private EntityRef<AuditSource> _AuditSource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditSourceIdChanging(int value);
    partial void OnAuditSourceIdChanged();
    partial void OnAuditIdChanging(int value);
    partial void OnAuditIdChanged();
    #endregion
		
		public AuditAuditSourceAssoc()
		{
			this._Audit = default(EntityRef<Audit>);
			this._AuditSource = default(EntityRef<AuditSource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditSourceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuditSourceId
		{
			get
			{
				return this._AuditSourceId;
			}
			set
			{
				if ((this._AuditSourceId != value))
				{
					if (this._AuditSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditSourceIdChanging(value);
					this.SendPropertyChanging();
					this._AuditSourceId = value;
					this.SendPropertyChanged("AuditSourceId");
					this.OnAuditSourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditAuditSourceAssoc", Storage="_Audit", ThisKey="AuditId", OtherKey="AuditId", IsForeignKey=true)]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.AuditAuditSourceAssocs.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.AuditAuditSourceAssocs.Add(this);
						this._AuditId = value.AuditId;
					}
					else
					{
						this._AuditId = default(int);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSource_AuditAuditSourceAssoc", Storage="_AuditSource", ThisKey="AuditSourceId", OtherKey="AuditSourceId", IsForeignKey=true)]
		public AuditSource AuditSource
		{
			get
			{
				return this._AuditSource.Entity;
			}
			set
			{
				AuditSource previousValue = this._AuditSource.Entity;
				if (((previousValue != value) 
							|| (this._AuditSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditSource.Entity = null;
						previousValue.AuditAuditSourceAssocs.Remove(this);
					}
					this._AuditSource.Entity = value;
					if ((value != null))
					{
						value.AuditAuditSourceAssocs.Add(this);
						this._AuditSourceId = value.AuditSourceId;
					}
					else
					{
						this._AuditSourceId = default(int);
					}
					this.SendPropertyChanged("AuditSource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditCode")]
	public partial class AuditCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeId;
		
		private string _Mnemonic;
		
		private string _Domain;
		
		private string _DisplayName;
		
		private EntitySet<Audit> _Audits;
		
		private EntitySet<Audit> _Audits1;
		
		private EntitySet<Audit> _Audits2;
		
		private EntitySet<AuditEventTypeAuditCodeAssoc> _AuditEventTypeAuditCodeAssocs;
		
		private EntitySet<AuditObject> _AuditObjects;
		
		private EntitySet<AuditObject> _AuditObjects1;
		
		private EntitySet<AuditObject> _AuditObjects2;
		
		private EntitySet<AuditObject> _AuditObjects3;
		
		private EntitySet<AuditParticipantRoleCodeAssoc> _AuditParticipantRoleCodeAssocs;
		
		private EntitySet<AuditSourceTypeAssoc> _AuditSourceTypeAssocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeIdChanging(int value);
    partial void OnCodeIdChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public AuditCode()
		{
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			this._Audits1 = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits1), new Action<Audit>(this.detach_Audits1));
			this._Audits2 = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits2), new Action<Audit>(this.detach_Audits2));
			this._AuditEventTypeAuditCodeAssocs = new EntitySet<AuditEventTypeAuditCodeAssoc>(new Action<AuditEventTypeAuditCodeAssoc>(this.attach_AuditEventTypeAuditCodeAssocs), new Action<AuditEventTypeAuditCodeAssoc>(this.detach_AuditEventTypeAuditCodeAssocs));
			this._AuditObjects = new EntitySet<AuditObject>(new Action<AuditObject>(this.attach_AuditObjects), new Action<AuditObject>(this.detach_AuditObjects));
			this._AuditObjects1 = new EntitySet<AuditObject>(new Action<AuditObject>(this.attach_AuditObjects1), new Action<AuditObject>(this.detach_AuditObjects1));
			this._AuditObjects2 = new EntitySet<AuditObject>(new Action<AuditObject>(this.attach_AuditObjects2), new Action<AuditObject>(this.detach_AuditObjects2));
			this._AuditObjects3 = new EntitySet<AuditObject>(new Action<AuditObject>(this.attach_AuditObjects3), new Action<AuditObject>(this.detach_AuditObjects3));
			this._AuditParticipantRoleCodeAssocs = new EntitySet<AuditParticipantRoleCodeAssoc>(new Action<AuditParticipantRoleCodeAssoc>(this.attach_AuditParticipantRoleCodeAssocs), new Action<AuditParticipantRoleCodeAssoc>(this.detach_AuditParticipantRoleCodeAssocs));
			this._AuditSourceTypeAssocs = new EntitySet<AuditSourceTypeAssoc>(new Action<AuditSourceTypeAssoc>(this.attach_AuditSourceTypeAssocs), new Action<AuditSourceTypeAssoc>(this.detach_AuditSourceTypeAssocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodeId
		{
			get
			{
				return this._CodeId;
			}
			set
			{
				if ((this._CodeId != value))
				{
					this.OnCodeIdChanging(value);
					this.SendPropertyChanging();
					this._CodeId = value;
					this.SendPropertyChanged("CodeId");
					this.OnCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="VarChar(54) NOT NULL", CanBeNull=false)]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="VarChar(54) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="VarChar(256)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_Audit", Storage="_Audits", ThisKey="CodeId", OtherKey="ActionCodeId")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_Audit1", Storage="_Audits1", ThisKey="CodeId", OtherKey="EventCodeId")]
		public EntitySet<Audit> Audits1
		{
			get
			{
				return this._Audits1;
			}
			set
			{
				this._Audits1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_Audit2", Storage="_Audits2", ThisKey="CodeId", OtherKey="OutcomeCodeId")]
		public EntitySet<Audit> Audits2
		{
			get
			{
				return this._Audits2;
			}
			set
			{
				this._Audits2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditEventTypeAuditCodeAssoc", Storage="_AuditEventTypeAuditCodeAssocs", ThisKey="CodeId", OtherKey="CodeId")]
		public EntitySet<AuditEventTypeAuditCodeAssoc> AuditEventTypeAuditCodeAssocs
		{
			get
			{
				return this._AuditEventTypeAuditCodeAssocs;
			}
			set
			{
				this._AuditEventTypeAuditCodeAssocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject", Storage="_AuditObjects", ThisKey="CodeId", OtherKey="IdTypeCodeId")]
		public EntitySet<AuditObject> AuditObjects
		{
			get
			{
				return this._AuditObjects;
			}
			set
			{
				this._AuditObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject1", Storage="_AuditObjects1", ThisKey="CodeId", OtherKey="LifecycleCodeId")]
		public EntitySet<AuditObject> AuditObjects1
		{
			get
			{
				return this._AuditObjects1;
			}
			set
			{
				this._AuditObjects1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject2", Storage="_AuditObjects2", ThisKey="CodeId", OtherKey="RoleCodeId")]
		public EntitySet<AuditObject> AuditObjects2
		{
			get
			{
				return this._AuditObjects2;
			}
			set
			{
				this._AuditObjects2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject3", Storage="_AuditObjects3", ThisKey="CodeId", OtherKey="TypeCodeId")]
		public EntitySet<AuditObject> AuditObjects3
		{
			get
			{
				return this._AuditObjects3;
			}
			set
			{
				this._AuditObjects3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditParticipantRoleCodeAssoc", Storage="_AuditParticipantRoleCodeAssocs", ThisKey="CodeId", OtherKey="CodeId")]
		public EntitySet<AuditParticipantRoleCodeAssoc> AuditParticipantRoleCodeAssocs
		{
			get
			{
				return this._AuditParticipantRoleCodeAssocs;
			}
			set
			{
				this._AuditParticipantRoleCodeAssocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditSourceTypeAssoc", Storage="_AuditSourceTypeAssocs", ThisKey="CodeId", OtherKey="CodeId")]
		public EntitySet<AuditSourceTypeAssoc> AuditSourceTypeAssocs
		{
			get
			{
				return this._AuditSourceTypeAssocs;
			}
			set
			{
				this._AuditSourceTypeAssocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.ActionCode = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.ActionCode = null;
		}
		
		private void attach_Audits1(Audit entity)
		{
			this.SendPropertyChanging();
			entity.EventCode = this;
		}
		
		private void detach_Audits1(Audit entity)
		{
			this.SendPropertyChanging();
			entity.EventCode = null;
		}
		
		private void attach_Audits2(Audit entity)
		{
			this.SendPropertyChanging();
			entity.OutcomeCode = this;
		}
		
		private void detach_Audits2(Audit entity)
		{
			this.SendPropertyChanging();
			entity.OutcomeCode = null;
		}
		
		private void attach_AuditEventTypeAuditCodeAssocs(AuditEventTypeAuditCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.EventTypeCode = this;
		}
		
		private void detach_AuditEventTypeAuditCodeAssocs(AuditEventTypeAuditCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.EventTypeCode = null;
		}
		
		private void attach_AuditObjects(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.IdTypeCode = this;
		}
		
		private void detach_AuditObjects(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.IdTypeCode = null;
		}
		
		private void attach_AuditObjects1(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.LifecycleCode = this;
		}
		
		private void detach_AuditObjects1(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.LifecycleCode = null;
		}
		
		private void attach_AuditObjects2(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.RoleCode = this;
		}
		
		private void detach_AuditObjects2(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.RoleCode = null;
		}
		
		private void attach_AuditObjects3(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.TypeCode = this;
		}
		
		private void detach_AuditObjects3(AuditObject entity)
		{
			this.SendPropertyChanging();
			entity.TypeCode = null;
		}
		
		private void attach_AuditParticipantRoleCodeAssocs(AuditParticipantRoleCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.RoleCode = this;
		}
		
		private void detach_AuditParticipantRoleCodeAssocs(AuditParticipantRoleCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.RoleCode = null;
		}
		
		private void attach_AuditSourceTypeAssocs(AuditSourceTypeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.TypeCode = this;
		}
		
		private void detach_AuditSourceTypeAssocs(AuditSourceTypeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.TypeCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditEventTypeAuditCodeAssoc")]
	public partial class AuditEventTypeAuditCodeAssoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditId;
		
		private int _CodeId;
		
		private EntityRef<Audit> _Audit;
		
		private EntityRef<AuditCode> _AuditCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIdChanging(int value);
    partial void OnAuditIdChanged();
    partial void OnCodeIdChanging(int value);
    partial void OnCodeIdChanged();
    #endregion
		
		public AuditEventTypeAuditCodeAssoc()
		{
			this._Audit = default(EntityRef<Audit>);
			this._AuditCode = default(EntityRef<AuditCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodeId
		{
			get
			{
				return this._CodeId;
			}
			set
			{
				if ((this._CodeId != value))
				{
					if (this._AuditCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeIdChanging(value);
					this.SendPropertyChanging();
					this._CodeId = value;
					this.SendPropertyChanged("CodeId");
					this.OnCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditEventTypeAuditCodeAssoc", Storage="_Audit", ThisKey="AuditId", OtherKey="AuditId", IsForeignKey=true)]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.AuditEventTypeAuditCodeAssocs.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.AuditEventTypeAuditCodeAssocs.Add(this);
						this._AuditId = value.AuditId;
					}
					else
					{
						this._AuditId = default(int);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditEventTypeAuditCodeAssoc", Storage="_AuditCode", ThisKey="CodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode EventTypeCode
		{
			get
			{
				return this._AuditCode.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode.Entity = null;
						previousValue.AuditEventTypeAuditCodeAssocs.Remove(this);
					}
					this._AuditCode.Entity = value;
					if ((value != null))
					{
						value.AuditEventTypeAuditCodeAssocs.Add(this);
						this._CodeId = value.CodeId;
					}
					else
					{
						this._CodeId = default(int);
					}
					this.SendPropertyChanged("EventTypeCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditObject")]
	public partial class AuditObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectId;
		
		private int _AuditId;
		
		private string _ExternalIdentifier;
		
		private int _TypeCodeId;
		
		private int _RoleCodeId;
		
		private System.Nullable<int> _LifecycleCodeId;
		
		private System.Nullable<int> _IdTypeCodeId;
		
		private string _ObjectSpec;
		
		private System.Nullable<char> _ObjectSpecType;
		
		private EntitySet<AuditObjectDetail> _AuditObjectDetails;
		
		private EntityRef<Audit> _Audit;
		
		private EntityRef<AuditCode> _AuditCode;
		
		private EntityRef<AuditCode> _AuditCode1;
		
		private EntityRef<AuditCode> _AuditCode2;
		
		private EntityRef<AuditCode> _AuditCode3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIdChanging(int value);
    partial void OnObjectIdChanged();
    partial void OnAuditIdChanging(int value);
    partial void OnAuditIdChanged();
    partial void OnExternalIdentifierChanging(string value);
    partial void OnExternalIdentifierChanged();
    partial void OnTypeCodeIdChanging(int value);
    partial void OnTypeCodeIdChanged();
    partial void OnRoleCodeIdChanging(int value);
    partial void OnRoleCodeIdChanged();
    partial void OnLifecycleCodeIdChanging(System.Nullable<int> value);
    partial void OnLifecycleCodeIdChanged();
    partial void OnIdTypeCodeIdChanging(System.Nullable<int> value);
    partial void OnIdTypeCodeIdChanged();
    partial void OnObjectSpecChanging(string value);
    partial void OnObjectSpecChanged();
    partial void OnObjectSpecTypeChanging(System.Nullable<char> value);
    partial void OnObjectSpecTypeChanged();
    #endregion
		
		public AuditObject()
		{
			this._AuditObjectDetails = new EntitySet<AuditObjectDetail>(new Action<AuditObjectDetail>(this.attach_AuditObjectDetails), new Action<AuditObjectDetail>(this.detach_AuditObjectDetails));
			this._Audit = default(EntityRef<Audit>);
			this._AuditCode = default(EntityRef<AuditCode>);
			this._AuditCode1 = default(EntityRef<AuditCode>);
			this._AuditCode2 = default(EntityRef<AuditCode>);
			this._AuditCode3 = default(EntityRef<AuditCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectId
		{
			get
			{
				return this._ObjectId;
			}
			set
			{
				if ((this._ObjectId != value))
				{
					this.OnObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ObjectId = value;
					this.SendPropertyChanged("ObjectId");
					this.OnObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="Int NOT NULL")]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalIdentifier", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ExternalIdentifier
		{
			get
			{
				return this._ExternalIdentifier;
			}
			set
			{
				if ((this._ExternalIdentifier != value))
				{
					this.OnExternalIdentifierChanging(value);
					this.SendPropertyChanging();
					this._ExternalIdentifier = value;
					this.SendPropertyChanged("ExternalIdentifier");
					this.OnExternalIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCodeId", DbType="Int NOT NULL")]
		public int TypeCodeId
		{
			get
			{
				return this._TypeCodeId;
			}
			set
			{
				if ((this._TypeCodeId != value))
				{
					if (this._AuditCode3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeCodeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeCodeId = value;
					this.SendPropertyChanged("TypeCodeId");
					this.OnTypeCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCodeId", DbType="Int NOT NULL")]
		public int RoleCodeId
		{
			get
			{
				return this._RoleCodeId;
			}
			set
			{
				if ((this._RoleCodeId != value))
				{
					if (this._AuditCode2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleCodeIdChanging(value);
					this.SendPropertyChanging();
					this._RoleCodeId = value;
					this.SendPropertyChanged("RoleCodeId");
					this.OnRoleCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleCodeId", DbType="Int")]
		public System.Nullable<int> LifecycleCodeId
		{
			get
			{
				return this._LifecycleCodeId;
			}
			set
			{
				if ((this._LifecycleCodeId != value))
				{
					if (this._AuditCode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLifecycleCodeIdChanging(value);
					this.SendPropertyChanging();
					this._LifecycleCodeId = value;
					this.SendPropertyChanged("LifecycleCodeId");
					this.OnLifecycleCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTypeCodeId", DbType="Int")]
		public System.Nullable<int> IdTypeCodeId
		{
			get
			{
				return this._IdTypeCodeId;
			}
			set
			{
				if ((this._IdTypeCodeId != value))
				{
					if (this._AuditCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTypeCodeIdChanging(value);
					this.SendPropertyChanging();
					this._IdTypeCodeId = value;
					this.SendPropertyChanged("IdTypeCodeId");
					this.OnIdTypeCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectSpec", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ObjectSpec
		{
			get
			{
				return this._ObjectSpec;
			}
			set
			{
				if ((this._ObjectSpec != value))
				{
					this.OnObjectSpecChanging(value);
					this.SendPropertyChanging();
					this._ObjectSpec = value;
					this.SendPropertyChanged("ObjectSpec");
					this.OnObjectSpecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectSpecType", DbType="Char(1)")]
		public System.Nullable<char> ObjectSpecType
		{
			get
			{
				return this._ObjectSpecType;
			}
			set
			{
				if ((this._ObjectSpecType != value))
				{
					this.OnObjectSpecTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectSpecType = value;
					this.SendPropertyChanged("ObjectSpecType");
					this.OnObjectSpecTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditObject_AuditObjectDetail", Storage="_AuditObjectDetails", ThisKey="ObjectId", OtherKey="ObjectId")]
		public EntitySet<AuditObjectDetail> AuditObjectDetails
		{
			get
			{
				return this._AuditObjectDetails;
			}
			set
			{
				this._AuditObjectDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditObject", Storage="_Audit", ThisKey="AuditId", OtherKey="AuditId", IsForeignKey=true)]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.AuditObjects.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.AuditObjects.Add(this);
						this._AuditId = value.AuditId;
					}
					else
					{
						this._AuditId = default(int);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject", Storage="_AuditCode", ThisKey="IdTypeCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode IdTypeCode
		{
			get
			{
				return this._AuditCode.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode.Entity = null;
						previousValue.AuditObjects.Remove(this);
					}
					this._AuditCode.Entity = value;
					if ((value != null))
					{
						value.AuditObjects.Add(this);
						this._IdTypeCodeId = value.CodeId;
					}
					else
					{
						this._IdTypeCodeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("IdTypeCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject1", Storage="_AuditCode1", ThisKey="LifecycleCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode LifecycleCode
		{
			get
			{
				return this._AuditCode1.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode1.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode1.Entity = null;
						previousValue.AuditObjects1.Remove(this);
					}
					this._AuditCode1.Entity = value;
					if ((value != null))
					{
						value.AuditObjects1.Add(this);
						this._LifecycleCodeId = value.CodeId;
					}
					else
					{
						this._LifecycleCodeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LifecycleCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject2", Storage="_AuditCode2", ThisKey="RoleCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode RoleCode
		{
			get
			{
				return this._AuditCode2.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode2.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode2.Entity = null;
						previousValue.AuditObjects2.Remove(this);
					}
					this._AuditCode2.Entity = value;
					if ((value != null))
					{
						value.AuditObjects2.Add(this);
						this._RoleCodeId = value.CodeId;
					}
					else
					{
						this._RoleCodeId = default(int);
					}
					this.SendPropertyChanged("RoleCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditObject3", Storage="_AuditCode3", ThisKey="TypeCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode TypeCode
		{
			get
			{
				return this._AuditCode3.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode3.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode3.Entity = null;
						previousValue.AuditObjects3.Remove(this);
					}
					this._AuditCode3.Entity = value;
					if ((value != null))
					{
						value.AuditObjects3.Add(this);
						this._TypeCodeId = value.CodeId;
					}
					else
					{
						this._TypeCodeId = default(int);
					}
					this.SendPropertyChanged("TypeCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditObjectDetails(AuditObjectDetail entity)
		{
			this.SendPropertyChanging();
			entity.AuditObject = this;
		}
		
		private void detach_AuditObjectDetails(AuditObjectDetail entity)
		{
			this.SendPropertyChanging();
			entity.AuditObject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditObjectDetail")]
	public partial class AuditObjectDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectDetailId;
		
		private int _ObjectId;
		
		private string _DetailType;
		
		private System.Data.Linq.Binary _DetailValue;
		
		private EntityRef<AuditObject> _AuditObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectDetailIdChanging(int value);
    partial void OnObjectDetailIdChanged();
    partial void OnObjectIdChanging(int value);
    partial void OnObjectIdChanged();
    partial void OnDetailTypeChanging(string value);
    partial void OnDetailTypeChanged();
    partial void OnDetailValueChanging(System.Data.Linq.Binary value);
    partial void OnDetailValueChanged();
    #endregion
		
		public AuditObjectDetail()
		{
			this._AuditObject = default(EntityRef<AuditObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectDetailId
		{
			get
			{
				return this._ObjectDetailId;
			}
			set
			{
				if ((this._ObjectDetailId != value))
				{
					this.OnObjectDetailIdChanging(value);
					this.SendPropertyChanging();
					this._ObjectDetailId = value;
					this.SendPropertyChanged("ObjectDetailId");
					this.OnObjectDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="Int NOT NULL")]
		public int ObjectId
		{
			get
			{
				return this._ObjectId;
			}
			set
			{
				if ((this._ObjectId != value))
				{
					if (this._AuditObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ObjectId = value;
					this.SendPropertyChanged("ObjectId");
					this.OnObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailType", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DetailType
		{
			get
			{
				return this._DetailType;
			}
			set
			{
				if ((this._DetailType != value))
				{
					this.OnDetailTypeChanging(value);
					this.SendPropertyChanging();
					this._DetailType = value;
					this.SendPropertyChanged("DetailType");
					this.OnDetailTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailValue", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DetailValue
		{
			get
			{
				return this._DetailValue;
			}
			set
			{
				if ((this._DetailValue != value))
				{
					this.OnDetailValueChanging(value);
					this.SendPropertyChanging();
					this._DetailValue = value;
					this.SendPropertyChanged("DetailValue");
					this.OnDetailValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditObject_AuditObjectDetail", Storage="_AuditObject", ThisKey="ObjectId", OtherKey="ObjectId", IsForeignKey=true)]
		public AuditObject AuditObject
		{
			get
			{
				return this._AuditObject.Entity;
			}
			set
			{
				AuditObject previousValue = this._AuditObject.Entity;
				if (((previousValue != value) 
							|| (this._AuditObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditObject.Entity = null;
						previousValue.AuditObjectDetails.Remove(this);
					}
					this._AuditObject.Entity = value;
					if ((value != null))
					{
						value.AuditObjectDetails.Add(this);
						this._ObjectId = value.ObjectId;
					}
					else
					{
						this._ObjectId = default(int);
					}
					this.SendPropertyChanged("AuditObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditParticipant")]
	public partial class AuditParticipant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParticipantId;
		
		private int _AuditId;
		
		private string _UserId;
		
		private System.Nullable<int> _NodeVersionId;
		
		private string _RawUserId;
		
		private string _RawUserName;
		
		private bool _IsRequestor;
		
		private string _NetworkAccessPoint;
		
		private EntitySet<AuditParticipantRoleCodeAssoc> _AuditParticipantRoleCodeAssocs;
		
		private EntityRef<Audit> _Audit;
		
		private EntityRef<NodeVersion> _NodeVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParticipantIdChanging(int value);
    partial void OnParticipantIdChanged();
    partial void OnAuditIdChanging(int value);
    partial void OnAuditIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnNodeVersionIdChanging(System.Nullable<int> value);
    partial void OnNodeVersionIdChanged();
    partial void OnRawUserIdChanging(string value);
    partial void OnRawUserIdChanged();
    partial void OnRawUserNameChanging(string value);
    partial void OnRawUserNameChanged();
    partial void OnIsRequestorChanging(bool value);
    partial void OnIsRequestorChanged();
    partial void OnNetworkAccessPointChanging(string value);
    partial void OnNetworkAccessPointChanged();
    #endregion
		
		public AuditParticipant()
		{
			this._AuditParticipantRoleCodeAssocs = new EntitySet<AuditParticipantRoleCodeAssoc>(new Action<AuditParticipantRoleCodeAssoc>(this.attach_AuditParticipantRoleCodeAssocs), new Action<AuditParticipantRoleCodeAssoc>(this.detach_AuditParticipantRoleCodeAssocs));
			this._Audit = default(EntityRef<Audit>);
			this._NodeVersion = default(EntityRef<NodeVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParticipantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParticipantId
		{
			get
			{
				return this._ParticipantId;
			}
			set
			{
				if ((this._ParticipantId != value))
				{
					this.OnParticipantIdChanging(value);
					this.SendPropertyChanging();
					this._ParticipantId = value;
					this.SendPropertyChanged("ParticipantId");
					this.OnParticipantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="Int NOT NULL")]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeVersionId", DbType="Int")]
		public System.Nullable<int> NodeVersionId
		{
			get
			{
				return this._NodeVersionId;
			}
			set
			{
				if ((this._NodeVersionId != value))
				{
					if (this._NodeVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeVersionIdChanging(value);
					this.SendPropertyChanging();
					this._NodeVersionId = value;
					this.SendPropertyChanged("NodeVersionId");
					this.OnNodeVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawUserId", DbType="VarChar(MAX)")]
		public string RawUserId
		{
			get
			{
				return this._RawUserId;
			}
			set
			{
				if ((this._RawUserId != value))
				{
					this.OnRawUserIdChanging(value);
					this.SendPropertyChanging();
					this._RawUserId = value;
					this.SendPropertyChanged("RawUserId");
					this.OnRawUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawUserName", DbType="VarChar(MAX)")]
		public string RawUserName
		{
			get
			{
				return this._RawUserName;
			}
			set
			{
				if ((this._RawUserName != value))
				{
					this.OnRawUserNameChanging(value);
					this.SendPropertyChanging();
					this._RawUserName = value;
					this.SendPropertyChanged("RawUserName");
					this.OnRawUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRequestor", DbType="Bit NOT NULL")]
		public bool IsRequestor
		{
			get
			{
				return this._IsRequestor;
			}
			set
			{
				if ((this._IsRequestor != value))
				{
					this.OnIsRequestorChanging(value);
					this.SendPropertyChanging();
					this._IsRequestor = value;
					this.SendPropertyChanged("IsRequestor");
					this.OnIsRequestorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetworkAccessPoint", DbType="VarChar(MAX)")]
		public string NetworkAccessPoint
		{
			get
			{
				return this._NetworkAccessPoint;
			}
			set
			{
				if ((this._NetworkAccessPoint != value))
				{
					this.OnNetworkAccessPointChanging(value);
					this.SendPropertyChanging();
					this._NetworkAccessPoint = value;
					this.SendPropertyChanged("NetworkAccessPoint");
					this.OnNetworkAccessPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditParticipant_AuditParticipantRoleCodeAssoc", Storage="_AuditParticipantRoleCodeAssocs", ThisKey="ParticipantId", OtherKey="ParticipantId")]
		public EntitySet<AuditParticipantRoleCodeAssoc> AuditParticipantRoleCodeAssocs
		{
			get
			{
				return this._AuditParticipantRoleCodeAssocs;
			}
			set
			{
				this._AuditParticipantRoleCodeAssocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditParticipant", Storage="_Audit", ThisKey="AuditId", OtherKey="AuditId", IsForeignKey=true)]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.AuditParticipants.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.AuditParticipants.Add(this);
						this._AuditId = value.AuditId;
					}
					else
					{
						this._AuditId = default(int);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeVersion_AuditParticipant", Storage="_NodeVersion", ThisKey="NodeVersionId", OtherKey="NodeVersionId", IsForeignKey=true)]
		public NodeVersion NodeVersion
		{
			get
			{
				return this._NodeVersion.Entity;
			}
			set
			{
				NodeVersion previousValue = this._NodeVersion.Entity;
				if (((previousValue != value) 
							|| (this._NodeVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeVersion.Entity = null;
						previousValue.AuditParticipants.Remove(this);
					}
					this._NodeVersion.Entity = value;
					if ((value != null))
					{
						value.AuditParticipants.Add(this);
						this._NodeVersionId = value.NodeVersionId;
					}
					else
					{
						this._NodeVersionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("NodeVersion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditParticipantRoleCodeAssocs(AuditParticipantRoleCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.AuditParticipant = this;
		}
		
		private void detach_AuditParticipantRoleCodeAssocs(AuditParticipantRoleCodeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.AuditParticipant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditParticipantRoleCodeAssoc")]
	public partial class AuditParticipantRoleCodeAssoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParticipantId;
		
		private int _CodeId;
		
		private EntityRef<AuditCode> _AuditCode;
		
		private EntityRef<AuditParticipant> _AuditParticipant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParticipantIdChanging(int value);
    partial void OnParticipantIdChanged();
    partial void OnCodeIdChanging(int value);
    partial void OnCodeIdChanged();
    #endregion
		
		public AuditParticipantRoleCodeAssoc()
		{
			this._AuditCode = default(EntityRef<AuditCode>);
			this._AuditParticipant = default(EntityRef<AuditParticipant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParticipantId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParticipantId
		{
			get
			{
				return this._ParticipantId;
			}
			set
			{
				if ((this._ParticipantId != value))
				{
					if (this._AuditParticipant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipantIdChanging(value);
					this.SendPropertyChanging();
					this._ParticipantId = value;
					this.SendPropertyChanged("ParticipantId");
					this.OnParticipantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodeId
		{
			get
			{
				return this._CodeId;
			}
			set
			{
				if ((this._CodeId != value))
				{
					if (this._AuditCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeIdChanging(value);
					this.SendPropertyChanging();
					this._CodeId = value;
					this.SendPropertyChanged("CodeId");
					this.OnCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditParticipantRoleCodeAssoc", Storage="_AuditCode", ThisKey="CodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode RoleCode
		{
			get
			{
				return this._AuditCode.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode.Entity = null;
						previousValue.AuditParticipantRoleCodeAssocs.Remove(this);
					}
					this._AuditCode.Entity = value;
					if ((value != null))
					{
						value.AuditParticipantRoleCodeAssocs.Add(this);
						this._CodeId = value.CodeId;
					}
					else
					{
						this._CodeId = default(int);
					}
					this.SendPropertyChanged("RoleCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditParticipant_AuditParticipantRoleCodeAssoc", Storage="_AuditParticipant", ThisKey="ParticipantId", OtherKey="ParticipantId", IsForeignKey=true)]
		public AuditParticipant AuditParticipant
		{
			get
			{
				return this._AuditParticipant.Entity;
			}
			set
			{
				AuditParticipant previousValue = this._AuditParticipant.Entity;
				if (((previousValue != value) 
							|| (this._AuditParticipant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditParticipant.Entity = null;
						previousValue.AuditParticipantRoleCodeAssocs.Remove(this);
					}
					this._AuditParticipant.Entity = value;
					if ((value != null))
					{
						value.AuditParticipantRoleCodeAssocs.Add(this);
						this._ParticipantId = value.ParticipantId;
					}
					else
					{
						this._ParticipantId = default(int);
					}
					this.SendPropertyChanged("AuditParticipant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditSession")]
	public partial class AuditSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SessionId;
		
		private int _ReceiverNodeVersionId;
		
		private int _SenderNodeVersionId;
		
		private System.DateTime _CreationTimestamp;
		
		private EntitySet<Audit> _Audits;
		
		private EntitySet<AuditError> _AuditErrors;
		
		private EntityRef<NodeVersion> _Receiver;
		
		private EntityRef<NodeVersion> _Sender;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIdChanging(System.Guid value);
    partial void OnSessionIdChanged();
    partial void OnReceiverNodeVersionIdChanging(int value);
    partial void OnReceiverNodeVersionIdChanged();
    partial void OnSenderNodeVersionIdChanging(int value);
    partial void OnSenderNodeVersionIdChanged();
    partial void OnCreationTimestampChanging(System.DateTime value);
    partial void OnCreationTimestampChanged();
    #endregion
		
		public AuditSession()
		{
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			this._AuditErrors = new EntitySet<AuditError>(new Action<AuditError>(this.attach_AuditErrors), new Action<AuditError>(this.detach_AuditErrors));
			this._Receiver = default(EntityRef<NodeVersion>);
			this._Sender = default(EntityRef<NodeVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverNodeVersionId", DbType="Int NOT NULL")]
		public int ReceiverNodeVersionId
		{
			get
			{
				return this._ReceiverNodeVersionId;
			}
			set
			{
				if ((this._ReceiverNodeVersionId != value))
				{
					if (this._Receiver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverNodeVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverNodeVersionId = value;
					this.SendPropertyChanged("ReceiverNodeVersionId");
					this.OnReceiverNodeVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderNodeVersionId", DbType="Int NOT NULL")]
		public int SenderNodeVersionId
		{
			get
			{
				return this._SenderNodeVersionId;
			}
			set
			{
				if ((this._SenderNodeVersionId != value))
				{
					if (this._Sender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderNodeVersionIdChanging(value);
					this.SendPropertyChanging();
					this._SenderNodeVersionId = value;
					this.SendPropertyChanged("SenderNodeVersionId");
					this.OnSenderNodeVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTimestamp", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTimestamp
		{
			get
			{
				return this._CreationTimestamp;
			}
			set
			{
				if ((this._CreationTimestamp != value))
				{
					this.OnCreationTimestampChanging(value);
					this.SendPropertyChanging();
					this._CreationTimestamp = value;
					this.SendPropertyChanged("CreationTimestamp");
					this.OnCreationTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSession_Audit", Storage="_Audits", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSession_AuditError", Storage="_AuditErrors", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<AuditError> AuditErrors
		{
			get
			{
				return this._AuditErrors;
			}
			set
			{
				this._AuditErrors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeVersion_AuditSession", Storage="_Receiver", ThisKey="ReceiverNodeVersionId", OtherKey="NodeVersionId", IsForeignKey=true)]
		public NodeVersion Receiver
		{
			get
			{
				return this._Receiver.Entity;
			}
			set
			{
				NodeVersion previousValue = this._Receiver.Entity;
				if (((previousValue != value) 
							|| (this._Receiver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receiver.Entity = null;
						previousValue.AuditSessions.Remove(this);
					}
					this._Receiver.Entity = value;
					if ((value != null))
					{
						value.AuditSessions.Add(this);
						this._ReceiverNodeVersionId = value.NodeVersionId;
					}
					else
					{
						this._ReceiverNodeVersionId = default(int);
					}
					this.SendPropertyChanged("Receiver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeVersion_AuditSession1", Storage="_Sender", ThisKey="SenderNodeVersionId", OtherKey="NodeVersionId", IsForeignKey=true)]
		public NodeVersion Sender
		{
			get
			{
				return this._Sender.Entity;
			}
			set
			{
				NodeVersion previousValue = this._Sender.Entity;
				if (((previousValue != value) 
							|| (this._Sender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sender.Entity = null;
						previousValue.AuditSessions1.Remove(this);
					}
					this._Sender.Entity = value;
					if ((value != null))
					{
						value.AuditSessions1.Add(this);
						this._SenderNodeVersionId = value.NodeVersionId;
					}
					else
					{
						this._SenderNodeVersionId = default(int);
					}
					this.SendPropertyChanged("Sender");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.AuditSession = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.AuditSession = null;
		}
		
		private void attach_AuditErrors(AuditError entity)
		{
			this.SendPropertyChanging();
			entity.AuditSession = this;
		}
		
		private void detach_AuditErrors(AuditError entity)
		{
			this.SendPropertyChanging();
			entity.AuditSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditSource")]
	public partial class AuditSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditSourceId;
		
		private string _EnterpriseSiteName;
		
		private string _AuditSourceName;
		
		private EntitySet<AuditAuditSourceAssoc> _AuditAuditSourceAssocs;
		
		private EntitySet<AuditSourceTypeAssoc> _AuditSourceTypeAssocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditSourceIdChanging(int value);
    partial void OnAuditSourceIdChanged();
    partial void OnEnterpriseSiteNameChanging(string value);
    partial void OnEnterpriseSiteNameChanged();
    partial void OnAuditSourceNameChanging(string value);
    partial void OnAuditSourceNameChanged();
    #endregion
		
		public AuditSource()
		{
			this._AuditAuditSourceAssocs = new EntitySet<AuditAuditSourceAssoc>(new Action<AuditAuditSourceAssoc>(this.attach_AuditAuditSourceAssocs), new Action<AuditAuditSourceAssoc>(this.detach_AuditAuditSourceAssocs));
			this._AuditSourceTypeAssocs = new EntitySet<AuditSourceTypeAssoc>(new Action<AuditSourceTypeAssoc>(this.attach_AuditSourceTypeAssocs), new Action<AuditSourceTypeAssoc>(this.detach_AuditSourceTypeAssocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditSourceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditSourceId
		{
			get
			{
				return this._AuditSourceId;
			}
			set
			{
				if ((this._AuditSourceId != value))
				{
					this.OnAuditSourceIdChanging(value);
					this.SendPropertyChanging();
					this._AuditSourceId = value;
					this.SendPropertyChanged("AuditSourceId");
					this.OnAuditSourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseSiteName", DbType="VarChar(MAX)")]
		public string EnterpriseSiteName
		{
			get
			{
				return this._EnterpriseSiteName;
			}
			set
			{
				if ((this._EnterpriseSiteName != value))
				{
					this.OnEnterpriseSiteNameChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseSiteName = value;
					this.SendPropertyChanged("EnterpriseSiteName");
					this.OnEnterpriseSiteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditSourceName", DbType="VarChar(MAX)")]
		public string AuditSourceName
		{
			get
			{
				return this._AuditSourceName;
			}
			set
			{
				if ((this._AuditSourceName != value))
				{
					this.OnAuditSourceNameChanging(value);
					this.SendPropertyChanging();
					this._AuditSourceName = value;
					this.SendPropertyChanged("AuditSourceName");
					this.OnAuditSourceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSource_AuditAuditSourceAssoc", Storage="_AuditAuditSourceAssocs", ThisKey="AuditSourceId", OtherKey="AuditSourceId")]
		public EntitySet<AuditAuditSourceAssoc> AuditAuditSourceAssocs
		{
			get
			{
				return this._AuditAuditSourceAssocs;
			}
			set
			{
				this._AuditAuditSourceAssocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSource_AuditSourceTypeAssoc", Storage="_AuditSourceTypeAssocs", ThisKey="AuditSourceId", OtherKey="AuditSourceId")]
		public EntitySet<AuditSourceTypeAssoc> AuditSourceTypeAssocs
		{
			get
			{
				return this._AuditSourceTypeAssocs;
			}
			set
			{
				this._AuditSourceTypeAssocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditAuditSourceAssocs(AuditAuditSourceAssoc entity)
		{
			this.SendPropertyChanging();
			entity.AuditSource = this;
		}
		
		private void detach_AuditAuditSourceAssocs(AuditAuditSourceAssoc entity)
		{
			this.SendPropertyChanging();
			entity.AuditSource = null;
		}
		
		private void attach_AuditSourceTypeAssocs(AuditSourceTypeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.AuditSource = this;
		}
		
		private void detach_AuditSourceTypeAssocs(AuditSourceTypeAssoc entity)
		{
			this.SendPropertyChanging();
			entity.AuditSource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditSourceTypeAssoc")]
	public partial class AuditSourceTypeAssoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditSourceId;
		
		private int _CodeId;
		
		private EntityRef<AuditSource> _AuditSource;
		
		private EntityRef<AuditCode> _AuditCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditSourceIdChanging(int value);
    partial void OnAuditSourceIdChanged();
    partial void OnCodeIdChanging(int value);
    partial void OnCodeIdChanged();
    #endregion
		
		public AuditSourceTypeAssoc()
		{
			this._AuditSource = default(EntityRef<AuditSource>);
			this._AuditCode = default(EntityRef<AuditCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditSourceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuditSourceId
		{
			get
			{
				return this._AuditSourceId;
			}
			set
			{
				if ((this._AuditSourceId != value))
				{
					if (this._AuditSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditSourceIdChanging(value);
					this.SendPropertyChanging();
					this._AuditSourceId = value;
					this.SendPropertyChanged("AuditSourceId");
					this.OnAuditSourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodeId
		{
			get
			{
				return this._CodeId;
			}
			set
			{
				if ((this._CodeId != value))
				{
					if (this._AuditCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeIdChanging(value);
					this.SendPropertyChanging();
					this._CodeId = value;
					this.SendPropertyChanged("CodeId");
					this.OnCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSource_AuditSourceTypeAssoc", Storage="_AuditSource", ThisKey="AuditSourceId", OtherKey="AuditSourceId", IsForeignKey=true)]
		public AuditSource AuditSource
		{
			get
			{
				return this._AuditSource.Entity;
			}
			set
			{
				AuditSource previousValue = this._AuditSource.Entity;
				if (((previousValue != value) 
							|| (this._AuditSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditSource.Entity = null;
						previousValue.AuditSourceTypeAssocs.Remove(this);
					}
					this._AuditSource.Entity = value;
					if ((value != null))
					{
						value.AuditSourceTypeAssocs.Add(this);
						this._AuditSourceId = value.AuditSourceId;
					}
					else
					{
						this._AuditSourceId = default(int);
					}
					this.SendPropertyChanged("AuditSource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditCode_AuditSourceTypeAssoc", Storage="_AuditCode", ThisKey="CodeId", OtherKey="CodeId", IsForeignKey=true)]
		public AuditCode TypeCode
		{
			get
			{
				return this._AuditCode.Entity;
			}
			set
			{
				AuditCode previousValue = this._AuditCode.Entity;
				if (((previousValue != value) 
							|| (this._AuditCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditCode.Entity = null;
						previousValue.AuditSourceTypeAssocs.Remove(this);
					}
					this._AuditCode.Entity = value;
					if ((value != null))
					{
						value.AuditSourceTypeAssocs.Add(this);
						this._CodeId = value.CodeId;
					}
					else
					{
						this._CodeId = default(int);
					}
					this.SendPropertyChanged("TypeCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditStatus")]
	public partial class AuditStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditVersionId;
		
		private int _AuditId;
		
		private int _StatusCodeId;
		
		private System.Nullable<bool> _IsAlert;
		
		private System.DateTime _CreationTimestamp;
		
		private System.Nullable<System.DateTime> _ObsoletionTimestamp;
		
		private string _ModifiedBy;
		
		private EntityRef<Audit> _Audit;
		
		private EntityRef<StatusCode> _StatusCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditVersionIdChanging(int value);
    partial void OnAuditVersionIdChanged();
    partial void OnAuditIdChanging(int value);
    partial void OnAuditIdChanged();
    partial void OnStatusCodeIdChanging(int value);
    partial void OnStatusCodeIdChanged();
    partial void OnIsAlertChanging(System.Nullable<bool> value);
    partial void OnIsAlertChanged();
    partial void OnCreationTimestampChanging(System.DateTime value);
    partial void OnCreationTimestampChanged();
    partial void OnObsoletionTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnObsoletionTimestampChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AuditStatus()
		{
			this._Audit = default(EntityRef<Audit>);
			this._StatusCode = default(EntityRef<StatusCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditVersionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditVersionId
		{
			get
			{
				return this._AuditVersionId;
			}
			set
			{
				if ((this._AuditVersionId != value))
				{
					this.OnAuditVersionIdChanging(value);
					this.SendPropertyChanging();
					this._AuditVersionId = value;
					this.SendPropertyChanged("AuditVersionId");
					this.OnAuditVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="Int NOT NULL")]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCodeId", DbType="Int NOT NULL")]
		public int StatusCodeId
		{
			get
			{
				return this._StatusCodeId;
			}
			set
			{
				if ((this._StatusCodeId != value))
				{
					if (this._StatusCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusCodeIdChanging(value);
					this.SendPropertyChanging();
					this._StatusCodeId = value;
					this.SendPropertyChanged("StatusCodeId");
					this.OnStatusCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAlert", DbType="Bit")]
		public System.Nullable<bool> IsAlert
		{
			get
			{
				return this._IsAlert;
			}
			set
			{
				if ((this._IsAlert != value))
				{
					this.OnIsAlertChanging(value);
					this.SendPropertyChanging();
					this._IsAlert = value;
					this.SendPropertyChanged("IsAlert");
					this.OnIsAlertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTimestamp", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTimestamp
		{
			get
			{
				return this._CreationTimestamp;
			}
			set
			{
				if ((this._CreationTimestamp != value))
				{
					this.OnCreationTimestampChanging(value);
					this.SendPropertyChanging();
					this._CreationTimestamp = value;
					this.SendPropertyChanged("CreationTimestamp");
					this.OnCreationTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTimestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> ObsoletionTimestamp
		{
			get
			{
				return this._ObsoletionTimestamp;
			}
			set
			{
				if ((this._ObsoletionTimestamp != value))
				{
					this.OnObsoletionTimestampChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTimestamp = value;
					this.SendPropertyChanged("ObsoletionTimestamp");
					this.OnObsoletionTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="VARCHAR(MAX)", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditStatus", Storage="_Audit", ThisKey="AuditId", OtherKey="AuditId", IsForeignKey=true)]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.AuditStatus.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.AuditStatus.Add(this);
						this._AuditId = value.AuditId;
					}
					else
					{
						this._AuditId = default(int);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusCode_AuditStatus", Storage="_StatusCode", ThisKey="StatusCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public StatusCode StatusCode
		{
			get
			{
				return this._StatusCode.Entity;
			}
			set
			{
				StatusCode previousValue = this._StatusCode.Entity;
				if (((previousValue != value) 
							|| (this._StatusCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusCode.Entity = null;
						previousValue.AuditStatus.Remove(this);
					}
					this._StatusCode.Entity = value;
					if ((value != null))
					{
						value.AuditStatus.Add(this);
						this._StatusCodeId = value.CodeId;
					}
					else
					{
						this._StatusCodeId = default(int);
					}
					this.SendPropertyChanged("StatusCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Node")]
	public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NodeId;
		
		private EntitySet<NodeVersion> _NodeVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIdChanging(int value);
    partial void OnNodeIdChanged();
    #endregion
		
		public Node()
		{
			this._NodeVersions = new EntitySet<NodeVersion>(new Action<NodeVersion>(this.attach_NodeVersions), new Action<NodeVersion>(this.detach_NodeVersions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this.OnNodeIdChanging(value);
					this.SendPropertyChanging();
					this._NodeId = value;
					this.SendPropertyChanged("NodeId");
					this.OnNodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_NodeVersion", Storage="_NodeVersions", ThisKey="NodeId", OtherKey="NodeId")]
		public EntitySet<NodeVersion> NodeVersions
		{
			get
			{
				return this._NodeVersions;
			}
			set
			{
				this._NodeVersions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NodeVersions(NodeVersion entity)
		{
			this.SendPropertyChanging();
			entity.Node = this;
		}
		
		private void detach_NodeVersions(NodeVersion entity)
		{
			this.SendPropertyChanging();
			entity.Node = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NodeVersion")]
	public partial class NodeVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NodeVersionId;
		
		private int _NodeId;
		
		private string _Name;
		
		private string _HostName;
		
		private System.Data.Linq.Binary _NodeMagic;
		
		private int _StatusCodeId;
		
		private System.DateTime _CreationTimestamp;
		
		private System.Nullable<System.DateTime> _ObsoletionTime;
		
		private EntitySet<AuditParticipant> _AuditParticipants;
		
		private EntitySet<AuditSession> _AuditSessions;
		
		private EntitySet<AuditSession> _AuditSessions1;
		
		private EntityRef<Node> _Node;
		
		private EntityRef<StatusCode> _StatusCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeVersionIdChanging(int value);
    partial void OnNodeVersionIdChanged();
    partial void OnNodeIdChanging(int value);
    partial void OnNodeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHostNameChanging(string value);
    partial void OnHostNameChanged();
    partial void OnNodeMagicChanging(System.Data.Linq.Binary value);
    partial void OnNodeMagicChanged();
    partial void OnStatusCodeIdChanging(int value);
    partial void OnStatusCodeIdChanged();
    partial void OnCreationTimestampChanging(System.DateTime value);
    partial void OnCreationTimestampChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnObsoletionTimeChanged();
    #endregion
		
		public NodeVersion()
		{
			this._AuditParticipants = new EntitySet<AuditParticipant>(new Action<AuditParticipant>(this.attach_AuditParticipants), new Action<AuditParticipant>(this.detach_AuditParticipants));
			this._AuditSessions = new EntitySet<AuditSession>(new Action<AuditSession>(this.attach_AuditSessions), new Action<AuditSession>(this.detach_AuditSessions));
			this._AuditSessions1 = new EntitySet<AuditSession>(new Action<AuditSession>(this.attach_AuditSessions1), new Action<AuditSession>(this.detach_AuditSessions1));
			this._Node = default(EntityRef<Node>);
			this._StatusCode = default(EntityRef<StatusCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeVersionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NodeVersionId
		{
			get
			{
				return this._NodeVersionId;
			}
			set
			{
				if ((this._NodeVersionId != value))
				{
					this.OnNodeVersionIdChanging(value);
					this.SendPropertyChanging();
					this._NodeVersionId = value;
					this.SendPropertyChanged("NodeVersionId");
					this.OnNodeVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="Int NOT NULL")]
		public int NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					if (this._Node.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIdChanging(value);
					this.SendPropertyChanging();
					this._NodeId = value;
					this.SendPropertyChanged("NodeId");
					this.OnNodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostName", DbType="VarChar(MAX)")]
		public string HostName
		{
			get
			{
				return this._HostName;
			}
			set
			{
				if ((this._HostName != value))
				{
					this.OnHostNameChanging(value);
					this.SendPropertyChanging();
					this._HostName = value;
					this.SendPropertyChanged("HostName");
					this.OnHostNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeMagic", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary NodeMagic
		{
			get
			{
				return this._NodeMagic;
			}
			set
			{
				if ((this._NodeMagic != value))
				{
					this.OnNodeMagicChanging(value);
					this.SendPropertyChanging();
					this._NodeMagic = value;
					this.SendPropertyChanged("NodeMagic");
					this.OnNodeMagicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCodeId", DbType="Int NOT NULL")]
		public int StatusCodeId
		{
			get
			{
				return this._StatusCodeId;
			}
			set
			{
				if ((this._StatusCodeId != value))
				{
					if (this._StatusCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusCodeIdChanging(value);
					this.SendPropertyChanging();
					this._StatusCodeId = value;
					this.SendPropertyChanged("StatusCodeId");
					this.OnStatusCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTimestamp", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTimestamp
		{
			get
			{
				return this._CreationTimestamp;
			}
			set
			{
				if ((this._CreationTimestamp != value))
				{
					this.OnCreationTimestampChanging(value);
					this.SendPropertyChanging();
					this._CreationTimestamp = value;
					this.SendPropertyChanged("CreationTimestamp");
					this.OnCreationTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeVersion_AuditParticipant", Storage="_AuditParticipants", ThisKey="NodeVersionId", OtherKey="NodeVersionId")]
		public EntitySet<AuditParticipant> AuditParticipants
		{
			get
			{
				return this._AuditParticipants;
			}
			set
			{
				this._AuditParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeVersion_AuditSession", Storage="_AuditSessions", ThisKey="NodeVersionId", OtherKey="ReceiverNodeVersionId")]
		public EntitySet<AuditSession> AuditSessions
		{
			get
			{
				return this._AuditSessions;
			}
			set
			{
				this._AuditSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeVersion_AuditSession1", Storage="_AuditSessions1", ThisKey="NodeVersionId", OtherKey="SenderNodeVersionId")]
		public EntitySet<AuditSession> AuditSessions1
		{
			get
			{
				return this._AuditSessions1;
			}
			set
			{
				this._AuditSessions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_NodeVersion", Storage="_Node", ThisKey="NodeId", OtherKey="NodeId", IsForeignKey=true)]
		public Node Node
		{
			get
			{
				return this._Node.Entity;
			}
			set
			{
				Node previousValue = this._Node.Entity;
				if (((previousValue != value) 
							|| (this._Node.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node.Entity = null;
						previousValue.NodeVersions.Remove(this);
					}
					this._Node.Entity = value;
					if ((value != null))
					{
						value.NodeVersions.Add(this);
						this._NodeId = value.NodeId;
					}
					else
					{
						this._NodeId = default(int);
					}
					this.SendPropertyChanged("Node");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusCode_NodeVersion", Storage="_StatusCode", ThisKey="StatusCodeId", OtherKey="CodeId", IsForeignKey=true)]
		public StatusCode StatusCode
		{
			get
			{
				return this._StatusCode.Entity;
			}
			set
			{
				StatusCode previousValue = this._StatusCode.Entity;
				if (((previousValue != value) 
							|| (this._StatusCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusCode.Entity = null;
						previousValue.NodeVersions.Remove(this);
					}
					this._StatusCode.Entity = value;
					if ((value != null))
					{
						value.NodeVersions.Add(this);
						this._StatusCodeId = value.CodeId;
					}
					else
					{
						this._StatusCodeId = default(int);
					}
					this.SendPropertyChanged("StatusCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditParticipants(AuditParticipant entity)
		{
			this.SendPropertyChanging();
			entity.NodeVersion = this;
		}
		
		private void detach_AuditParticipants(AuditParticipant entity)
		{
			this.SendPropertyChanging();
			entity.NodeVersion = null;
		}
		
		private void attach_AuditSessions(AuditSession entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = this;
		}
		
		private void detach_AuditSessions(AuditSession entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = null;
		}
		
		private void attach_AuditSessions1(AuditSession entity)
		{
			this.SendPropertyChanging();
			entity.Sender = this;
		}
		
		private void detach_AuditSessions1(AuditSession entity)
		{
			this.SendPropertyChanging();
			entity.Sender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditError")]
	public partial class AuditError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorId;
		
		private System.Guid _SessionId;
		
		private string _ErrorMessage;
		
		private System.Nullable<System.Guid> _AuditMessageId;
		
		private string _StackTrace;
		
		private System.Nullable<int> _CausedById;
		
		private EntitySet<AuditError> _AuditErrors;
		
		private EntityRef<AuditError> _AuditError1;
		
		private EntityRef<AuditSession> _AuditSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIdChanging(int value);
    partial void OnErrorIdChanged();
    partial void OnSessionIdChanging(System.Guid value);
    partial void OnSessionIdChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnAuditMessageIdChanging(System.Nullable<System.Guid> value);
    partial void OnAuditMessageIdChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnCausedByIdChanging(System.Nullable<int> value);
    partial void OnCausedByIdChanged();
    #endregion
		
		public AuditError()
		{
			this._AuditErrors = new EntitySet<AuditError>(new Action<AuditError>(this.attach_AuditErrors), new Action<AuditError>(this.detach_AuditErrors));
			this._AuditError1 = default(EntityRef<AuditError>);
			this._AuditSession = default(EntityRef<AuditSession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorId
		{
			get
			{
				return this._ErrorId;
			}
			set
			{
				if ((this._ErrorId != value))
				{
					this.OnErrorIdChanging(value);
					this.SendPropertyChanging();
					this._ErrorId = value;
					this.SendPropertyChanged("ErrorId");
					this.OnErrorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AuditSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditMessageId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AuditMessageId
		{
			get
			{
				return this._AuditMessageId;
			}
			set
			{
				if ((this._AuditMessageId != value))
				{
					this.OnAuditMessageIdChanging(value);
					this.SendPropertyChanging();
					this._AuditMessageId = value;
					this.SendPropertyChanged("AuditMessageId");
					this.OnAuditMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="VarChar(MAX)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CausedById", DbType="Int")]
		public System.Nullable<int> CausedById
		{
			get
			{
				return this._CausedById;
			}
			set
			{
				if ((this._CausedById != value))
				{
					if (this._AuditError1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCausedByIdChanging(value);
					this.SendPropertyChanging();
					this._CausedById = value;
					this.SendPropertyChanged("CausedById");
					this.OnCausedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditError_AuditError", Storage="_AuditErrors", ThisKey="ErrorId", OtherKey="CausedById")]
		public EntitySet<AuditError> AuditErrors
		{
			get
			{
				return this._AuditErrors;
			}
			set
			{
				this._AuditErrors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditError_AuditError", Storage="_AuditError1", ThisKey="CausedById", OtherKey="ErrorId", IsForeignKey=true)]
		public AuditError AuditError1
		{
			get
			{
				return this._AuditError1.Entity;
			}
			set
			{
				AuditError previousValue = this._AuditError1.Entity;
				if (((previousValue != value) 
							|| (this._AuditError1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditError1.Entity = null;
						previousValue.AuditErrors.Remove(this);
					}
					this._AuditError1.Entity = value;
					if ((value != null))
					{
						value.AuditErrors.Add(this);
						this._CausedById = value.ErrorId;
					}
					else
					{
						this._CausedById = default(Nullable<int>);
					}
					this.SendPropertyChanged("AuditError1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditSession_AuditError", Storage="_AuditSession", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public AuditSession AuditSession
		{
			get
			{
				return this._AuditSession.Entity;
			}
			set
			{
				AuditSession previousValue = this._AuditSession.Entity;
				if (((previousValue != value) 
							|| (this._AuditSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditSession.Entity = null;
						previousValue.AuditErrors.Remove(this);
					}
					this._AuditSession.Entity = value;
					if ((value != null))
					{
						value.AuditErrors.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(System.Guid);
					}
					this.SendPropertyChanged("AuditSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditErrors(AuditError entity)
		{
			this.SendPropertyChanging();
			entity.AuditError1 = this;
		}
		
		private void detach_AuditErrors(AuditError entity)
		{
			this.SendPropertyChanging();
			entity.AuditError1 = null;
		}
	}
	
	public partial class sp_SetAuditStatusResult
	{
		
		private int _ParticipantId;
		
		private int _AuditId;
		
		private string _UserId;
		
		private System.Nullable<int> _NodeVersionId;
		
		private string _RawUserId;
		
		private string _RawUserName;
		
		private bool _IsRequestor;
		
		private string _NetworkAccessPoint;
		
		private string _RoleCodeMnemonic;
		
		private string _RoleCodeDisplay;
		
		public sp_SetAuditStatusResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParticipantId", DbType="Int NOT NULL")]
		public int ParticipantId
		{
			get
			{
				return this._ParticipantId;
			}
			set
			{
				if ((this._ParticipantId != value))
				{
					this._ParticipantId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="Int NOT NULL")]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					this._AuditId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeVersionId", DbType="Int")]
		public System.Nullable<int> NodeVersionId
		{
			get
			{
				return this._NodeVersionId;
			}
			set
			{
				if ((this._NodeVersionId != value))
				{
					this._NodeVersionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawUserId", DbType="VarChar(MAX)")]
		public string RawUserId
		{
			get
			{
				return this._RawUserId;
			}
			set
			{
				if ((this._RawUserId != value))
				{
					this._RawUserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawUserName", DbType="VarChar(MAX)")]
		public string RawUserName
		{
			get
			{
				return this._RawUserName;
			}
			set
			{
				if ((this._RawUserName != value))
				{
					this._RawUserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRequestor", DbType="Bit NOT NULL")]
		public bool IsRequestor
		{
			get
			{
				return this._IsRequestor;
			}
			set
			{
				if ((this._IsRequestor != value))
				{
					this._IsRequestor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetworkAccessPoint", DbType="VarChar(MAX)")]
		public string NetworkAccessPoint
		{
			get
			{
				return this._NetworkAccessPoint;
			}
			set
			{
				if ((this._NetworkAccessPoint != value))
				{
					this._NetworkAccessPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCodeMnemonic", DbType="VarChar(54) NOT NULL", CanBeNull=false)]
		public string RoleCodeMnemonic
		{
			get
			{
				return this._RoleCodeMnemonic;
			}
			set
			{
				if ((this._RoleCodeMnemonic != value))
				{
					this._RoleCodeMnemonic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCodeDisplay", DbType="VarChar(256)")]
		public string RoleCodeDisplay
		{
			get
			{
				return this._RoleCodeDisplay;
			}
			set
			{
				if ((this._RoleCodeDisplay != value))
				{
					this._RoleCodeDisplay = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
